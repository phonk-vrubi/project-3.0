{% extends "docs.jinja2" %}

{% block docs %}
<h1>UsersResource</h1>
<p>Ресурс для работы с пользователями.
Реализует GET, PUT, POST запросы.
Точки входа:
'/api/v1/users', '/api/users/\&lt;int:user_id>'</p>
<h3>GET</h3>
<p>Если запрашивается инфомрация о текущем пользователе, или user_id не передан, то
результатом запроса будет полная информация о текущем пользователе в формате
json.</p>
<h3>PUT</h3>
<p>Данный запрос позволяет редактирвоать информацию пользователя по user_id
Данные должны передавать в теле соответствующего PUT-запроса.</p>
<h3>POST</h3>
<p>Запрос отвечающий за добавление нового пользователя. Обязательные данные для
создания нового пользваотеля: first_name, second_name, password,  email. Все 
они также должны передаваться в теле
POST-запроса</p>
<h1>MessagesResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.
Ресурс для работы с сообщенями.
Реализует POST-запрос.
Точка входа:
'/api/v1/messages'</p>
<h3>POST</h3>
<p>Передаются все данные, необходимые для создания сообщения: sender_id,
chat_id или receiver_id, text. В случае успешного создания возвращается 
json типа:
<code>json
{"success": "OK"}</code></p>
<h1>MessagesResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.
Ресурс для работы с сообщенями.
Реализует GET-запрос.
Точка входа:
'/api/v1/messages/<int:alt_id>/<date>'</p>
<h3>GET</h3>
<p>При данном запросе либо не передается ничего, тогда результатом будет список
последних сообщений по 1 от каждого друга текущего пользователя. Если
передается user_id, то результатом будет список сообщений от пользователя
с переданным user_id к текущему пользователю. Если передается и user_id,
и date, то результатом будет список сообщений от пользователя
с переданным user_id к текущему пользователю, которые были созданы после
переданной даты date</p>
<h1>UsersFriendsResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.
Ресурс для работы с друзьями пользователей.
Реализует GET, POST, DELETE запросы.
Точка входа:
'/api/v1/users_friends'</p>
<h3>GET</h3>
<p>Если ничего не переадется, то результатом будет список друзей текущего
залогиненного пользователя. Если передается аргумент is_accepted,
то возвращаются все друзья, колонка is_accepted которых равна переданному
параметру.</p>
<h3>POST</h3>
<p>При данном запросе переадется обязательный аргумент user_id
пользователя, который будет добавлен в друзья к текущему.</p>
<h3>DELETE</h3>
<p>Этот запрос принимает обязательный аргумент user_id. Пользователь
с этим user_id будет удален</p>
<h1>ChatsResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.
Русурс для работы с чатами.
Реализует GET, POST, DELETE запросы.
Точка входа:
/api/v1/chats'</p>
<h3>GET</h3>
<p>Возвращает список чатов текущего пользователя</p>
<h3>POST</h3>
<p>При данном запросе создается чат по переданным аргументам
(first_author_id, second_author_id - обязательные, title - необязательный)</p>
<h3>DELETE</h3>
<p>При данном запросе переадется id чата либо user_id пользователя,
с которым ведётся чат. Этот чат и все сообщения из него будут удалены.</p>
{% endblock %}